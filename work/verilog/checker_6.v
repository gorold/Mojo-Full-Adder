/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module checker_6 (
    input clk,
    input rst,
    input rst2,
    output reg [3:0] checkingNum,
    output reg [1:0] result,
    input start,
    input next_test,
    input auto
  );
  
  
  
  localparam IDLE_state = 4'd0;
  localparam ZERO_state = 4'd1;
  localparam ONE_state = 4'd2;
  localparam TWO_state = 4'd3;
  localparam THREE_state = 4'd4;
  localparam FOUR_state = 4'd5;
  localparam FIVE_state = 4'd6;
  localparam SIX_state = 4'd7;
  localparam SEVEN_state = 4'd8;
  localparam AUTO_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = IDLE_state;
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  localparam ZERO_state2 = 3'd0;
  localparam ONE_state2 = 3'd1;
  localparam TWO_state2 = 3'd2;
  localparam THREE_state2 = 3'd3;
  localparam FOUR_state2 = 3'd4;
  localparam FIVE_state2 = 3'd5;
  localparam SIX_state2 = 3'd6;
  localparam SEVEN_state2 = 3'd7;
  
  reg [2:0] M_state2_d, M_state2_q = ZERO_state2;
  
  wire [2-1:0] M_lut_checker_out;
  reg [4-1:0] M_lut_checker_in;
  choose_lut_12 lut_checker (
    .in(M_lut_checker_in),
    .out(M_lut_checker_out)
  );
  
  integer check;
  
  always @* begin
    M_state2_d = M_state2_q;
    M_state_d = M_state_q;
    M_counter_d = M_counter_q;
    
    checkingNum = check;
    M_lut_checker_in = check;
    result = M_lut_checker_out;
    
    case (M_state_q)
      IDLE_state: begin
        check = 4'hf;
        if (auto) begin
          M_state_d = AUTO_state;
        end
        if (start) begin
          M_state_d = ZERO_state;
        end
      end
      ZERO_state: begin
        check = 4'h0;
        if (next_test) begin
          M_state_d = ONE_state;
        end
      end
      ONE_state: begin
        check = 4'h1;
        if (next_test) begin
          M_state_d = TWO_state;
        end
      end
      TWO_state: begin
        check = 4'h2;
        if (next_test) begin
          M_state_d = THREE_state;
        end
      end
      THREE_state: begin
        check = 4'h4;
        if (next_test) begin
          M_state_d = FOUR_state;
        end
      end
      FOUR_state: begin
        check = 4'h3;
        if (next_test) begin
          M_state_d = FIVE_state;
        end
      end
      FIVE_state: begin
        check = 4'h5;
        if (next_test) begin
          M_state_d = SIX_state;
        end
      end
      SIX_state: begin
        check = 4'h6;
        if (next_test) begin
          M_state_d = SEVEN_state;
        end
      end
      SEVEN_state: begin
        check = 4'h7;
        if (next_test) begin
          M_state_d = IDLE_state;
        end
      end
      AUTO_state: begin
        if (M_counter_q[0+24-:25] == 1'h0) begin
          
          case (M_state2_q)
            ZERO_state2: begin
              check = 4'h0;
              M_state2_d = ONE_state2;
            end
            ONE_state2: begin
              check = 4'h1;
              M_state2_d = TWO_state2;
            end
            TWO_state2: begin
              check = 4'h2;
              M_state2_d = THREE_state2;
            end
            THREE_state2: begin
              check = 4'h4;
              M_state2_d = FOUR_state2;
            end
            FOUR_state2: begin
              check = 4'h3;
              M_state2_d = FIVE_state2;
            end
            FIVE_state2: begin
              check = 4'h5;
              M_state2_d = SIX_state2;
            end
            SIX_state2: begin
              check = 4'h6;
              M_state2_d = SEVEN_state2;
            end
            SEVEN_state2: begin
              check = 4'h7;
              M_state2_d = ONE_state2;
            end
          endcase
        end
        M_counter_d = M_counter_q + 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
    
    if (rst2 == 1'b1) begin
      M_counter_q <= 1'h0;
      M_state2_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_state2_q <= M_state2_d;
    end
  end
  
endmodule
