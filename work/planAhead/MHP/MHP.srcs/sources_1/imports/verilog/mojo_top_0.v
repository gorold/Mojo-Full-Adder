/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [2:0] real_output,
    input [1:0] real_input
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_start_button_out;
  reg [1-1:0] M_start_button_in;
  button_conditioner_2 start_button (
    .clk(clk),
    .in(M_start_button_in),
    .out(M_start_button_out)
  );
  wire [1-1:0] M_next_test_button_out;
  reg [1-1:0] M_next_test_button_in;
  button_conditioner_2 next_test_button (
    .clk(clk),
    .in(M_next_test_button_in),
    .out(M_next_test_button_out)
  );
  wire [1-1:0] M_auto_button_out;
  reg [1-1:0] M_auto_button_in;
  button_conditioner_2 auto_button (
    .clk(clk),
    .in(M_auto_button_in),
    .out(M_auto_button_out)
  );
  wire [1-1:0] M_next_test_edge_out;
  reg [1-1:0] M_next_test_edge_in;
  edge_detector_5 next_test_edge (
    .clk(clk),
    .in(M_next_test_edge_in),
    .out(M_next_test_edge_out)
  );
  wire [4-1:0] M_checker_checkingNum;
  wire [2-1:0] M_checker_result;
  reg [1-1:0] M_checker_rst2;
  reg [1-1:0] M_checker_start;
  reg [1-1:0] M_checker_next_test;
  reg [1-1:0] M_checker_auto;
  checker_6 checker (
    .clk(clk),
    .rst(rst),
    .rst2(M_checker_rst2),
    .start(M_checker_start),
    .next_test(M_checker_next_test),
    .auto(M_checker_auto),
    .checkingNum(M_checker_checkingNum),
    .result(M_checker_result)
  );
  wire [8-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [16-1:0] M_seg_display_values;
  reg [4-1:0] M_seg_display_decimal;
  multi_seg_7 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .decimal(M_seg_display_decimal),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  
  wire [4-1:0] M_passOrFail_out;
  reg [2-1:0] M_passOrFail_checker;
  reg [2-1:0] M_passOrFail_circuit;
  passOrFail_8 passOrFail (
    .checker(M_passOrFail_checker),
    .circuit(M_passOrFail_circuit),
    .out(M_passOrFail_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_start_button_in = io_button[1+0-:1];
    M_next_test_button_in = io_button[4+0-:1];
    M_auto_button_in = io_button[0+0-:1];
    M_next_test_edge_in = M_next_test_button_out;
    M_checker_start = M_start_button_out;
    M_checker_next_test = M_next_test_edge_out;
    M_checker_rst2 = M_auto_button_out;
    M_checker_auto = M_auto_button_out;
    real_output = M_checker_checkingNum;
    M_passOrFail_checker = M_checker_result;
    M_passOrFail_circuit = real_input;
    if (M_checker_checkingNum == 4'hf) begin
      real_output = 3'h0;
      M_seg_display_values = 16'haaaa;
    end else begin
      M_seg_display_values = {M_passOrFail_out, {3'h0, M_checker_checkingNum[2+0-:1]}, {3'h0, M_checker_checkingNum[1+0-:1]}, {3'h0, M_checker_checkingNum[0+0-:1]}};
    end
    M_seg_display_decimal = 4'h0;
    io_seg = ~M_seg_display_seg;
    io_sel = ~M_seg_display_sel;
    io_led[0+0+1-:2] = M_checker_result;
    io_led[8+0+1-:2] = real_input;
  end
endmodule
